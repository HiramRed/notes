/**
 *前言：不管怎么说，自己的算数方法肯定不如运算符号的，有这个思路就好
 */


/**
 *加法
 *加法现实方法是将两位数作^操作，可以得到两位数的不进位结果，然后再加上只有进位的结果(x&y) << 1，
 *将不进位结果与只有进位结果再次做加操作，直到进位为0
 *@param x int num1
 *@param y int num2
 *@return x + y;
 */

public int add(int x,int y){  
    int i,j; //i作为不进位结果，j作为只有进位结果
    do{
	i = x ^ y;
	j = (x & y) << 1;
	x = i;
	y = j;
    }while(j != 0);
    return i;
 
    //return y ? add(x ^ y,(x & y) << 1) : x; //精简写法，不建议使用
}



/**
 *减法
 *将x - y转换成x + (-y)，正数转成负数为(~y) + 1，减法的操作实际是在做加法
 *@param x int num1
 *@param y int num2
 *@return x - y
 */

public int subtract(int x,int y){
    return add(x,add(~y , 1));
}



/**
 *乘
 *x * y最基本的运算就是x加上y个x
 *也能理解为位运算操作和加法操作
 *@param x int num1
 *@param y int num2
 *@return x * y
 */

//旧思路
//public int multiply(int x,int y){
//        if(y == 0 || x == 0)  //如果两个乘数有一个0，则直接返回0
//            return 0;
//        //使用*符号进行运算，Integer.MIN_VALUE * -1结果依然为Integer.MIN_VALUE，所以不做取负数处理
//        boolean ny = y < 0;  //若y为负，取x相反数，将y改为正数，最终结果不受影响，方便位移计算
//        if(ny){
//            y = -y;
//            x = -x;
//        }
//        //将q << n个位(值刚好超过y的值),记录x还未位移的值，设q << n = m
//        //相当于将乘转换为 x * (m + (m - y));
//        int q = 1,r = x;
//        while(q < y){
//            q <<= 1;
//            x <<= 1;
//        }
//        return subtract(x,multiply(r,subtract(q,y)));
//    }

//update 2019/11/5
public int multiply(int x,int y){ 
    //判断x,y正负，并转换为正数
    boolean ny = y < 0;  
    if(ny){		//将y转正，x取反，不影响结果
	x = -x;
	y = -y;
    }
    //当y的对应位(y & 0x01)为1时，对x左移一位后加上一次结果(r)
    //当y的对应位为0时，只对x左移一位
    int r = 0;
    while(y != 0){       //y一直左移到符号位（0）
        if((y & 1) == 1){
            r = add(r,x);
        }
        x <<= 1;
        y >>= 1;
    }
    return r;
}



/**
 *除
 *除与乘相似，也可以用递减来达到结果
 *除算法公式：y * n + m = x（n为商);
 *@param x int num1
 *@param y int num2
 *@return x / y
 */

//老思路
//public int devision(int x,int y){
//    if(y == 0)
//        throw new ArithmeticException("/ by zero"); //除数不能为0
//    if(x == 0)  				  //被除数为0直接返回0
//        return 0;
//    boolean ny = y < 0;  		//将x,y转为负数，防止Integer.MIN_VALUE转成正数造成溢出
//    boolean nx = x < 0;
//    if(!ny) y = -y;
//    if(!nx) x = -x;
//    if(x > y) 			//被除数小于除数时，返回0
//        return 0;
//    int q = -1,r = y,s = subtract(x,y);  //若y * 2 < x - y，则y还能进行位移，q记录每次位移的积
//    while(s <= y){
//        y <<= 1;
//        q <<= 1;
//        s = subtract(x,y);
//    }
//    if(nx ^ ny){    //若除数与被除数符号相同，则返回正数
//        q = -q;
//        return add(q,devision(s,r));
//    }else{
//        return add(q,-devision(s,r));
//    }
//}

//update 2019/11/5
public int devision0(int x, int y) {
    if (y == 0)
        throw new ArithmeticException("/ by zero");

    int q = 0,s = 0;
    boolean ny = y < 0;
    boolean nx = x < 0;

    if(ny) y = -y;
    if(nx) x = -x;

    while(x >= y){
        while((x >> q) >> 1 > y){
            q = add(q,1);
        }
        x = subtract(x,y << q);
        s = add(s,1 << q);
        q = 0;
    }

    if(ny ^ nx)
        s = -s;
    return s;
}



/**
 *取模
 *被除数 - 商
 *@param x int num1
 *@param y int num2
 *@return x % y
 */

public int remainder(int x,int y){
    return subtract(x,devision(x,y));
}